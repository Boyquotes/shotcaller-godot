[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform sampler2D origin_colors;
uniform sampler2D new_colors;
uniform int total_colors;
uniform float tolerance;

vec4 get_color(sampler2D sampler, float position) {
    return texture(sampler, vec2(position+tolerance, 0));
}

vec4 replace_color(vec4 current_color) {
	for (int i = 0; i < total_colors; i++) {
		float color_step = float(i)/float(total_colors);
		if (length(current_color - get_color(origin_colors, color_step) ) < tolerance) {
			return get_color(new_colors, color_step );
		}
	}
	return current_color;
}

void fragment() {
	vec4 current_pixel = texture(TEXTURE, UV);
	COLOR = replace_color(current_pixel);
}"
